{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n/**\n * API service for communicating with the backend\n */\nclass ApiService {\n  /**\n   * Fetch all AI tools from the backend\n   * @returns {Promise<Array>} Array of AI tools\n   */\n  async getAITools() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ai-tools`);\n      const data = await response.json();\n      if (data.success) {\n        return data.data;\n      } else {\n        throw new Error(data.error || 'Failed to fetch AI tools');\n      }\n    } catch (error) {\n      console.error('Error fetching AI tools:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch a single AI tool by ID\n   * @param {number} toolId - The ID of the AI tool\n   * @returns {Promise<Object>} AI tool data with aggregated review\n   */\n  async getAITool(toolId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ai-tools/${toolId}`);\n      const data = await response.json();\n      if (data.success) {\n        return data.data;\n      } else {\n        throw new Error(data.error || 'Failed to fetch AI tool');\n      }\n    } catch (error) {\n      console.error('Error fetching AI tool:', error);\n      throw error;\n    }\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","getAITools","response","fetch","data","json","success","Error","error","console","getAITool","toolId"],"sources":["/Users/alessandroledesma/Development/project-insights/insight-engine/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n/**\n * API service for communicating with the backend\n */\nclass ApiService {\n  /**\n   * Fetch all AI tools from the backend\n   * @returns {Promise<Array>} Array of AI tools\n   */\n  async getAITools() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ai-tools`);\n      const data = await response.json();\n      \n      if (data.success) {\n        return data.data;\n      } else {\n        throw new Error(data.error || 'Failed to fetch AI tools');\n      }\n    } catch (error) {\n      console.error('Error fetching AI tools:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch a single AI tool by ID\n   * @param {number} toolId - The ID of the AI tool\n   * @returns {Promise<Object>} AI tool data with aggregated review\n   */\n  async getAITool(toolId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ai-tools/${toolId}`);\n      const data = await response.json();\n      \n      if (data.success) {\n        return data.data;\n      } else {\n        throw new Error(data.error || 'Failed to fetch AI tool');\n      }\n    } catch (error) {\n      console.error('Error fetching AI tool:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new ApiService(); "],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA;AACA;AACA,MAAMC,UAAU,CAAC;EACf;AACF;AACA;AACA;EACE,MAAMC,UAAUA,CAAA,EAAG;IACjB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,WAAW,CAAC;MACxD,MAAMQ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChB,OAAOF,IAAI,CAACA,IAAI;MAClB,CAAC,MAAM;QACL,MAAM,IAAIG,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,0BAA0B,CAAC;MAC3D;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAME,SAASA,CAACC,MAAM,EAAE;IACtB,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,aAAae,MAAM,EAAE,CAAC;MAClE,MAAMP,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChB,OAAOF,IAAI,CAACA,IAAI;MAClB,CAAC,MAAM;QACL,MAAM,IAAIG,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,yBAAyB,CAAC;MAC1D;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;AACF;AAEA,eAAe,IAAIR,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}